trigger:
  - master

resources:
  repositories:
    - repository: templates
      type: git
      name: TAS/azdo-pipeline-templates
      ref: refs/heads/master

variables:
  agentPool: "Rabo-Build-Azure-Windows"
  vstsFeed: 'ea1adc59-f67e-40d5-8539-4c897a894647'
  token: $(PAT)
  code: $(functionsMasterKey)
  secret: $(clientSecret)
  key: $(logAnalyticsWorkspaceKey)
  fortifyServiceEndPoint: "Fortify SSC TAS"
  fortifyApplicationName: "TAS.SecurePipelineScanner"
  nexusIQServiceEndPoint: "Nexus IQ - Production"
  nexusIQApplicationId: "azdo-compliancy-rules"
  sonarQubeEndpoint: "SonarQube Production On Prem - with token"
  sonarQubeProjectKey: "TAS.SecurePipelineScanner"
  sonarQubeProjectName: "TAS.SecurePipelineScanner"

jobs:
- job: Test
  pool: $(agentPool)
  steps:
  - template: /steps/build-step.yml@templates
    parameters:
      vstsFeed: $(vstsFeed)
  - task: DotNetCoreCLI@2
    displayName: Test
    inputs:
      command: test
      arguments: '--configuration release --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude="[xunit*]*" --logger trx'
    env:
      token: $(token)
      code: $(code)
      clientSecret: $(secret)
      key: $(key)
  - template: /steps/code-coverage-step.yml@templates
- template: /jobs/static-analysis-job.yml@templates
  parameters:
    fortifyServiceEndPoint: $(fortifyServiceEndPoint)
    fortifyApplicationName: $(fortifyApplicationName)
    vstsFeed: $(vstsFeed)
    nexusIQServiceEndPoint: $(nexusIQServiceEndPoint)
    nexusIQApplicationId: $(nexusIQApplicationId)
    sonarQubeEndpoint: $(sonarQubeEndpoint)
    sonarQubeProjectKey: $(sonarQubeProjectKey)
    sonarQubeProjectName: $(sonarQubeProjectName)
- job: Publish
  pool: $(agentPool)
  steps:
  - script: |
      #!/bin/bash 2> nul
      :; set -o errexit
      :; function goto() { return $?; }
      dotnet build --configuration release || goto :error
      dotnet pack --configuration release --output $(Build.ArtifactStagingDirectory) /p:PackageVersion=0.0.1.$(Build.BuildId) || goto :error
      :; exit 0
      exit /b 0
      :error
      exit /b %errorlevel%
    displayName: Dotnet Build & Pack
  - task: DotNetCoreCLI@2
    displayName: Dotnet Push
    inputs:
      command: push
      publishVstsFeed: '$(vstsFeed)'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  - template: /steps/publish-artifact-step.yml@templates
name: $(Build.BuildId)
pool: 'Rabo-Build-Azure-Windows'
trigger:
  - master
variables:
  buildConfiguration: 'Release'

steps:
- checkout: self
  clean: true
  
- task: SonarSource.sonarqube.15B84CA1-B62F-4A2A-A403-89B77A063157.SonarQubePrepare@4
  displayName: 'SonarQube: Prepare analysis on SonarQube'
  inputs:
    SonarQube: 'SonarQube Production On Prem - with token'
    projectKey: TAS.SecurePipelineScanner
    extraProperties: sonar.buildbreaker.skip=true

# inspired by: https://stackoverflow.com/a/46813196/129269
- script: |
    #!/bin/bash 2> nul
    
    :; set -o errexit
    :; function goto() { return $?; }

    dotnet test --configuration $(buildConfiguration) --logger trx /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:DebugType=Full || goto :error

    dotnet tool install dotnet-sonarscanner --tool-path tools || goto :error
    tools\dotnet-sonarscanner begin /key:"TAS.SecurePipelineScanner" /d:sonar.cs.opencover.reportsPaths="**\coverage.opencover.xml" || goto :error
    dotnet build --configuration $(buildConfiguration) || goto :error
    tools\dotnet-sonarscanner end || goto :error

    dotnet pack --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory) /p:PackageVersion=0.0.1.$(Build.BuildId) || goto :error

    :; exit 0
    exit /b 0
  
    :error
    exit /b %errorlevel%
  displayName: 'Build, test & pack'
  env:
    token: $(PAT)
    code: $(functionsMasterKey)
    clientSecret: $(clientSecret)
    key: $(logAnalyticsWorkspaceKey)

- task: ms-codeanalysis.vss-microsoft-security-code-analysis-devops.build-task-credscan.CredScan@2
  inputs:
    verboseOutput: false

- task: ms-codeanalysis.vss-microsoft-security-code-analysis-devops.build-task-postanalysis.PostAnalysis@1
  inputs:
    CredScan: true
    ToolLogsNotFoundAction: 'Error'

- task: SonarSource.sonarqube.291ed61f-1ee4-45d3-b1b0-bf822d9095ef.SonarQubePublish@4
  displayName: 'SonarQube: Publish Quality Gate Result'

- task: fortifyvsts.hpe-security-fortify-vsts.build-task-fortify-sca.FortifySCA@5
  displayName: 'Fortify: local scan'
  inputs:
    applicationType: other
    buildToolOptions: '-dotnet-version 2.1'
    fortifyBuildId: test
    runFortifyClean: true
    runFortifyUpload: true
    fortifyServerName: 'Fortify SSC TAS'
    fortifyApplicationName: TAS.SecurePipelineScanner
    fortifyApplicationVersion: 1.0

- task: PublishTestResults@2
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'
  condition: succeededOrFailed()

- script: |
    dotnet tool install dotnet-reportgenerator-globaltool --tool-path tools || goto :error
    tools\reportgenerator -reports:"*\coverage.opencover.xml" -reporttypes:"HtmlInline_AzurePipelines;cobertura" -targetDir:reports
  displayName: Generate code coverage reports
  condition: succeededOrFailed()

- task: PublishCodeCoverageResults@1
  inputs:
    summaryFileLocation: $(Build.SourcesDirectory)\reports\Cobertura.xml
    reportDirectory: $(Build.SourcesDirectory)\reports
    codecoverageTool: cobertura
  condition: succeededOrFailed()

- task: DotNetCoreCLI@2
  displayName: 'dotnet push'
  inputs:
    command: push
    publishVstsFeed: 'ea1adc59-f67e-40d5-8539-4c897a894647'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))